name: PR Preview Deployment

on:
  pull_request:
    branches: [ main ]

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Deploy Preview to Vercel
      uses: amondnet/vercel-action@v25
      id: vercel-preview
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        github-comment: true

    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const previewUrl = '${{ steps.vercel-preview.outputs.preview-url }}';
          
          const body = `## 🚀 Preview Deployment Ready!
          
          **Preview URL:** ${previewUrl || 'Check Vercel dashboard'}
          
          ### Build Status:
          - ✅ Dependencies installed with Yarn
          - 🌐 Preview environment deployed
          
          **Commit:** ${context.sha.substring(0, 7)}
          **Branch:** ${context.payload.pull_request.head.ref}
          
          ---
          *This preview will be automatically updated with new commits.*`;
          
          // Update existing comment or create new one
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Preview Deployment Ready')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }